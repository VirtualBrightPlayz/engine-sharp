{"VertexShader":"#version 300 es\n\nstruct LightInfoStruct\n{\n    vec4 AmbientColor;\n    vec4 LightPosition[4];\n    vec4 LightColor[4];\n};\n\nlayout(std140) uniform LightInfo0\n{\n    LightInfoStruct LightInfo;\n} _41;\n\nlayout(std140) uniform BonesMatrix\n{\n    mat4 Bones[64];\n} _61;\n\nlayout(std140) uniform ProjectionMatrix\n{\n    mat4 Projection;\n} _150;\n\nlayout(std140) uniform ViewMatrix\n{\n    mat4 View;\n} _155;\n\nlayout(std140) uniform WorldMatrix\n{\n    mat4 World;\n} _161;\n\nlayout(std140) uniform WorldInfo0\n{\n    vec4 ViewPosition;\n} _221;\n\nout vec3 vdspv_fsin8[4];\nlayout(location = 8) in uvec4 BoneIndices;\nlayout(location = 7) in vec4 BoneWeights;\nlayout(location = 0) in vec3 Position;\nout vec2 vdspv_fsin0;\nlayout(location = 2) in vec2 UV0;\nout vec4 vdspv_fsin1;\nlayout(location = 4) in vec4 Color;\nout vec2 vdspv_fsin2;\nlayout(location = 3) in vec2 UV1;\nout vec3 vdspv_fsin3;\nout vec3 vdspv_fsin6;\nlayout(location = 1) in vec3 Normal;\nout vec3 vdspv_fsin7;\nlayout(location = 5) in vec3 Tangent;\nlayout(location = 6) in vec3 BiTangent;\nout vec3 vdspv_fsin4;\nout vec3 vdspv_fsin5;\nmat3 TBN;\n\nvoid TransferLightInfo()\n{\n    for (int i = 0; i < 4; i++)\n    {\n        vdspv_fsin8[i] = TBN * _41.LightInfo.LightPosition[i].xyz;\n    }\n}\n\nvoid main()\n{\n    mat4 boneTransformation = _61.Bones[BoneIndices.x] * BoneWeights.x;\n    mat4 _85 = _61.Bones[BoneIndices.y] * BoneWeights.y;\n    boneTransformation = mat4(boneTransformation[0] + _85[0], boneTransformation[1] + _85[1], boneTransformation[2] + _85[2], boneTransformation[3] + _85[3]);\n    mat4 _107 = _61.Bones[BoneIndices.z] * BoneWeights.z;\n    boneTransformation = mat4(boneTransformation[0] + _107[0], boneTransformation[1] + _107[1], boneTransformation[2] + _107[2], boneTransformation[3] + _107[3]);\n    mat4 _129 = _61.Bones[BoneIndices.w] * BoneWeights.w;\n    boneTransformation = mat4(boneTransformation[0] + _129[0], boneTransformation[1] + _129[1], boneTransformation[2] + _129[2], boneTransformation[3] + _129[3]);\n    gl_Position = (((_150.Projection * _155.View) * _161.World) * boneTransformation) * vec4(Position, 1.0);\n    vdspv_fsin0 = UV0;\n    vdspv_fsin1 = Color;\n    vdspv_fsin2 = UV1;\n    vdspv_fsin3 = vec3((_161.World * vec4(Position, 1.0)).xyz);\n    mat4 _207 = transpose(inverse(_161.World));\n    vdspv_fsin6 = mat3(_207[0].xyz, _207[1].xyz, _207[2].xyz) * Normal;\n    vdspv_fsin7 = _221.ViewPosition.xyz;\n    vec3 T = normalize(mat3(_161.World[0].xyz, _161.World[1].xyz, _161.World[2].xyz) * Tangent);\n    vec3 B = normalize(mat3(_161.World[0].xyz, _161.World[1].xyz, _161.World[2].xyz) * BiTangent);\n    vec3 N = normalize(mat3(_161.World[0].xyz, _161.World[1].xyz, _161.World[2].xyz) * Normal);\n    TBN = transpose(mat3(vec3(T), vec3(B), vec3(N)));\n    TransferLightInfo();\n    vdspv_fsin4 = TBN * _221.ViewPosition.xyz;\n    vdspv_fsin5 = TBN * vec3((_161.World * vec4(Position, 1.0)).xyz);\n}\n\n","FragmentShader":"#version 300 es\nprecision mediump float;\nprecision highp int;\n\nstruct LightInfoStruct\n{\n    highp vec4 AmbientColor;\n    highp vec4 LightPosition[4];\n    highp vec4 LightColor[4];\n};\n\nlayout(std140) uniform LightInfo0\n{\n    LightInfoStruct LightInfo;\n} _72;\n\nlayout(std140) uniform ViewMatrix\n{\n    highp mat4 View;\n} _485;\n\nlayout(std140) uniform ProjectionMatrix\n{\n    highp mat4 Projection;\n} _488;\n\nlayout(std140) uniform WorldMatrix\n{\n    highp mat4 World;\n} _491;\n\nlayout(std140) uniform WorldInfo0\n{\n    highp vec4 ViewPosition;\n} _494;\n\nlayout(std140) uniform BonesMatrix\n{\n    highp mat4 Bones[64];\n} _499;\n\nuniform highp sampler2D BumpTexture;\nuniform highp sampler2D DiffuseTexture;\nuniform highp sampler2D LightmapTexture;\n\nin highp vec3 vdspv_fsin8[4];\nin highp vec3 vdspv_fsin5;\nin highp vec3 vdspv_fsin4;\nin highp vec2 vdspv_fsin0;\nin highp vec2 vdspv_fsin2;\nlayout(location = 0) out highp vec4 FragColor;\nin highp vec4 vdspv_fsin1;\nin highp vec3 vdspv_fsin3;\nin highp vec3 vdspv_fsin6;\nin highp vec3 vdspv_fsin7;\nhighp vec3 bumpNormal;\n\nhighp float GetHeightFromBump(highp vec2 texCoords)\n{\n    highp vec3 bump = texture(BumpTexture, texCoords).xyz;\n    bump = normalize((bump * 2.0) - vec3(1.0));\n    highp float height = dot(bump, vec3(0.0, 0.0, 1.0));\n    return height;\n}\n\nhighp vec2 ParallaxMapping(highp vec2 texCoords, highp vec3 viewDir, highp float multi)\n{\n    highp float layerDepth = 0.100000001490116119384765625;\n    highp float currentLayerDepth = 0.0;\n    highp vec2 p = viewDir.xy * multi;\n    highp vec2 deltaCoords = p / vec2(10.0);\n    highp vec2 currentCoords = texCoords;\n    highp vec2 param = currentCoords;\n    highp float currentDepthValue = GetHeightFromBump(param);\n    while (currentLayerDepth < currentDepthValue)\n    {\n        currentCoords -= deltaCoords;\n        highp vec2 param_1 = currentCoords;\n        currentDepthValue = GetHeightFromBump(param_1);\n        currentLayerDepth += layerDepth;\n    }\n    highp vec2 prevCoords = currentCoords + deltaCoords;\n    highp float afterDepth = currentDepthValue - currentLayerDepth;\n    highp vec2 param_2 = prevCoords;\n    highp float beforeDepth = (GetHeightFromBump(param_2) - currentLayerDepth) + layerDepth;\n    highp float weight = afterDepth / (afterDepth - beforeDepth);\n    highp vec2 finalCoords = (prevCoords * weight) + (currentCoords * (1.0 - weight));\n    return finalCoords;\n}\n\nhighp vec3 ApplyAmbientLighting()\n{\n    return _72.LightInfo.AmbientColor.xyz;\n}\n\nhighp float GetLightAttenuation(int i)\n{\n    highp float attenuation = 0.0;\n    highp float d = length(vdspv_fsin8[i] - vdspv_fsin5);\n    highp float a = _72.LightInfo.LightPosition[i].w / (d * d);\n    attenuation += clamp(a, 0.0, 1.0);\n    return attenuation;\n}\n\nhighp vec3 ApplyDiffuseLighting(int i)\n{\n    highp vec3 norm = -normalize(bumpNormal);\n    highp vec3 outDiff = vec3(0.0);\n    highp vec4 lightPos = vec4(vdspv_fsin8[i], _72.LightInfo.LightPosition[i].w);\n    highp vec3 lightDir = normalize(lightPos.xyz - vdspv_fsin5);\n    highp float diff = max(dot(norm, lightDir), 0.0);\n    outDiff += (_72.LightInfo.LightColor[i].xyz * diff);\n    return outDiff;\n}\n\nhighp vec3 ApplySpecularLighting(int i)\n{\n    highp vec3 norm = -normalize(bumpNormal);\n    highp vec3 outDiff = vec3(0.0);\n    highp vec4 lightPos = vec4(vdspv_fsin8[i], _72.LightInfo.LightPosition[i].w);\n    highp vec3 lightDir = normalize(lightPos.xyz - vdspv_fsin5);\n    highp vec3 viewDir = normalize(vdspv_fsin4 - vdspv_fsin5);\n    highp vec3 halfwayDir = normalize(lightDir + viewDir);\n    highp float spec = pow(max(dot(norm, halfwayDir), 0.0), 32.0);\n    highp vec3 specular = _72.LightInfo.LightColor[i].xyz * spec;\n    outDiff += specular;\n    return outDiff;\n}\n\nhighp float ApplyAlphaLighting(int i, highp vec3 lighting, highp float a)\n{\n    highp vec3 norm = -normalize(bumpNormal);\n    highp vec4 lightPos = vec4(vdspv_fsin8[i], _72.LightInfo.LightPosition[i].w);\n    highp vec3 lightDir = normalize(lightPos.xyz - vdspv_fsin5);\n    highp vec3 viewDir = normalize(vdspv_fsin4 - vdspv_fsin5);\n    highp vec3 halfwayDir = normalize(lightDir + viewDir);\n    highp float diff = max(dot(norm, lightDir), 0.0);\n    highp float spec = pow(max(dot(norm, halfwayDir), 0.0), 32.0);\n    return (diff * a) + (spec * a);\n}\n\nhighp vec4 ApplyLighting()\n{\n    highp vec4 col = vec4(ApplyAmbientLighting(), 0.0);\n    for (int i = 0; float(i) < _72.LightInfo.AmbientColor.w; i++)\n    {\n        int param = i;\n        highp float a = GetLightAttenuation(param);\n        int param_1 = i;\n        int param_2 = i;\n        highp vec3 lighting = (ApplyDiffuseLighting(param_1) * a) + (ApplySpecularLighting(param_2) * a);\n        int param_3 = i;\n        highp vec3 param_4 = lighting;\n        highp float param_5 = a;\n        highp vec4 fLight = vec4(lighting, ApplyAlphaLighting(param_3, param_4, param_5));\n        highp vec3 _296 = col.xyz + fLight.xyz;\n        col = vec4(_296.x, _296.y, _296.z, col.w);\n        col.w += fLight.w;\n    }\n    col.w *= 0.0;\n    return col;\n}\n\nvoid main()\n{\n    bumpNormal = texture(BumpTexture, vdspv_fsin0).xyz;\n    bumpNormal = normalize((bumpNormal * 2.0) - vec3(1.0));\n    highp vec3 viewDir = normalize(vdspv_fsin4 - vdspv_fsin5);\n    highp vec2 param = vdspv_fsin0;\n    highp vec3 param_1 = viewDir;\n    highp float param_2 = 0.0500000007450580596923828125;\n    highp vec2 uvOffset0 = ParallaxMapping(param, param_1, param_2);\n    highp vec4 diffuseColor = pow(texture(DiffuseTexture, vdspv_fsin0), vec4(1.0));\n    highp vec4 lightmapColor = texture(LightmapTexture, vdspv_fsin2);\n    highp vec4 lighting = ApplyLighting();\n    highp vec4 finalLighting = lighting;\n    FragColor = (diffuseColor * vec4(finalLighting.xyz, 1.0)) * vdspv_fsin1;\n    FragColor.w = lighting.w;\n}\n\n","Reflection":{"VertexElements":[{"Name":"Position","Semantic":2,"Format":2,"Offset":0},{"Name":"Normal","Semantic":2,"Format":2,"Offset":0},{"Name":"UV0","Semantic":2,"Format":1,"Offset":0},{"Name":"UV1","Semantic":2,"Format":1,"Offset":0},{"Name":"Color","Semantic":2,"Format":3,"Offset":0},{"Name":"Tangent","Semantic":2,"Format":2,"Offset":0},{"Name":"BiTangent","Semantic":2,"Format":2,"Offset":0},{"Name":"BoneWeights","Semantic":2,"Format":3,"Offset":0},{"Name":"BoneIndices","Semantic":2,"Format":23,"Offset":0}],"ResourceLayouts":[{"Elements":[{"Name":"ViewMatrix","Kind":0,"Stages":17,"Options":0},{"Name":"ProjectionMatrix","Kind":0,"Stages":17,"Options":0}]},{"Elements":[{"Name":"WorldMatrix","Kind":0,"Stages":17,"Options":0}]},{"Elements":[{"Name":"DiffuseTexture","Kind":3,"Stages":17,"Options":0},{"Name":"DiffuseTextureSampler","Kind":5,"Stages":17,"Options":0},{"Name":"LightmapTexture","Kind":3,"Stages":17,"Options":0},{"Name":"LightmapTextureSampler","Kind":5,"Stages":17,"Options":0},{"Name":"BumpTexture","Kind":3,"Stages":17,"Options":0},{"Name":"BumpTextureSampler","Kind":5,"Stages":17,"Options":0}]},{"Elements":[{"Name":"WorldInfo0","Kind":0,"Stages":17,"Options":0}]},{"Elements":[{"Name":"LightInfo0","Kind":0,"Stages":17,"Options":0}]},{"Elements":[{"Name":"BonesMatrix","Kind":0,"Stages":17,"Options":0}]}]}}